import torch
import torch.nn as nn
import torch.optim as optim

class MultiLayerNN(nn.Module):
    def __init__(self, input_size, hidden_size, output_size, num_hidden_layers):
        super(MultiLayerNN, self).__init__()
        self.hidden_layers = nn.ModuleList()
        self.hidden_layers.append(nn.Linear(input_size, hidden_size))
        for _ in range(num_hidden_layers - 1):
            self.hidden_layers.append(nn.Linear(hidden_size, hidden_size))
        self.output_layer = nn.Linear(hidden_size, output_size)
        self.relu = nn.ReLU()

    def forward(self, x):
        for layer in self.hidden_layers:
            x = self.relu(layer(x))
        x = self.output_layer(x)
        return x

def train_model(model, criterion, optimizer, data_loader, num_epochs=5):
    model.train()
    for epoch in range(num_epochs):
        for inputs, targets in data_loader:
            outputs = model(inputs)
            loss = criterion(outputs, targets)
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()
        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}')

def load_error_data():
    inputs = []
    targets = []
    with open("error_log.txt", "r") as f:
        lines = f.readlines()
        for i in range(0, len(lines), 3):
            original = lines[i].strip().split(": ")[1]
            recognized = lines[i+1].strip().split(": ")[1]
            inputs.append(list(map(ord, recognized)))
            targets.append(list(map(ord, original)))
    return inputs, targets
